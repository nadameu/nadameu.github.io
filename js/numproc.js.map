{"version":3,"file":"numproc.js","sources":["src/Either.ts","src/h.ts","src/cadastros.ts","src/parseInput.ts","src/update.ts","src/main.ts","src/index.ts"],"sourcesContent":["export type Either<a, b> = Left<a> | Right<b>;\r\n\r\nexport type Left<a> = { isLeft: true; isRight: false; leftValue: a };\r\nexport function Left<a>(leftValue: a): Left<a> {\r\n  return { isLeft: true, isRight: false, leftValue };\r\n}\r\n\r\nexport type Right<b> = { isLeft: false; isRight: true; rightValue: b };\r\nexport function Right<b>(rightValue: b): Right<b> {\r\n  return { isLeft: false, isRight: true, rightValue };\r\n}\r\n","export function h<K extends keyof HTMLElementTagNameMap>(\r\n  tag: K,\r\n  props?: Partial<HTMLElementTagNameMap[K]> | null,\r\n  ...children: Array<string | HTMLElement>\r\n): HTMLElementTagNameMap[K] {\r\n  const elt = document.createElement(tag);\r\n  for (const [key, value] of Object.entries(props ?? {})) {\r\n    (elt as any)[key] = value;\r\n  }\r\n  elt.append(...children);\r\n  return elt;\r\n}\r\n","import { Parte, Segmento, Tribunal, Unidade } from \"./NumProc\";\r\n\r\nconst CSV_Estados =\r\n  \",Acre,Alagoas,Amapá,Amazonas,Bahia,Ceará,Distrito Federal,Espírito Santo,Goiás,Maranhão,Mato Grosso,Mato Grosso do Sul,Minas Gerais,Pará,Paraíba,Paraná,Pernambuco,Piauí,Rio de Janeiro,Rio Grande do Norte,Rio Grande do Sul,Rondônia,Roraima,Santa Catarina,Sergipe,São Paulo,Tocantins\";\r\nexport const estados = CSV_Estados.split(\",\");\r\nconst CSV_Subsecoes_PR =\r\n  \"Curitiba,Londrina,Foz do Iguaçu,Maringá,Umuarama,Cascavel,Guarapuava,Francisco Beltrão,Paranaguá,Ponta Grossa,Campo Mourão,Paranavaí,Pato Branco,Jacarezinho,União da Vitória,Apucarana,Toledo,Guaíra,Ibaiti - Jacarezinho,Ibaiti - Londrina,Ibaiti - Ponta Grossa,Pitanga - Guarapuava,Pitanga - Campo Mourão,Pitanga - Apucarana,Wenceslau Braz - Jacarezinho,Wenceslau Braz - Ponta Grossa,Astorga - Londrina,Astorga - Maringá,Telêmaco Borba,Wenceslau Braz - Telêmaco Borba,Ibaiti - Telêmaco Borba,Arapongas,Pitanga,Ivaiporã\";\r\nconst CSV_Subsecoes_RS =\r\n  \"Porto Alegre,Rio Grande,Santa Maria,Uruguaiana,Passo Fundo,Santo Ângelo,Santana do Livramento,Caxias do Sul,Novo Hamburgo,Bagé,Pelotas,Santa Cruz do Sul,Canoas,Bento Gonçalves,Lajeado,Santa Rosa,Cruz Alta,Erechim,Carazinho,Cachoeira do Sul,Santiago,Capão da Canoa,Gravataí,Alegrete,Montenegro,Santa Vitória do Palmar,Jaguarão,Palmeira das Missões,Vacaria,São Leopoldo,Frederico Westphalen,Soledade,Itaqui,Ijuí,São Borja,São Jerônimo,São Luiz Gonzaga,Camaquã,Gramado/Canela - Caxias,Torres,Gramado/Canela - Novo Hamburgo,Nova Prata\";\r\nconst CSV_Subsecoes_SC =\r\n  \"Florianópolis,Joinville,Chapecó,Joaçaba,Criciúma,Blumenau,Lages,Tubarão,Itajaí,Jaraguá do Sul,São Miguel do Oeste,Caçador,Concórdia,Rio do Sul,Mafra,Brusque,Laguna,Araranguá,São Francisco do Sul,Videira - Caçador,Tijucas,Videira - Joaçaba\";\r\nconst CSV_Foruns_TJSC = `,Abelardo Luz,Anchieta,Anita Garibaldi,Araranguá,Bal. Camboriú,Barra Velha,Biguaçu,Blumenau,Bom Retiro,Braço do Norte,Brusque,Caçador,Campo Erê,Campos Novos,Canoinhas,Capinzal,Dionísio Cerqueira,Chapecó,Concórdia,Criciúma,Cunha Porã,Curitibanos,Capital,Fraiburgo,Gaspar,Guaramirim,Ibirama,Içara,Imaruí,Imbituba,Indaial,Itaiópolis,Itajaí,Itapiranga,Ituporanga,Jaraguá do Sul,Joaçaba,Joinville,Lages,Laguna,Mafra,Maravilha,Mondaí,Orleans,Palhoça,Palmitos,Papanduva,Bal. Piçarras,Pinhalzinho,Pomerode,Ponte Serrada,Porto União,Quilombo,Rio do Sul,Rio Negrinho,Santa Cecília,Santo Amaro da Imperatriz,São Bento do Sul,São Carlos,São Domingos,São Francisco do Sul,São João Batista,São Joaquim,São José,São José do Cedro,São Lourenço do Oeste,São Miguel do Oeste,Seara,Sombrio,Taió,Tangará,Tijucas,Timbó,Trombudo Central,Tubarão,Turvo,Urubici,Urussanga,Videira,Xanxerê,Xaxim,Capital/Estreito,Correia Pinto,Descanso,Coronel Freitas,Otacílio Costa,Lauro Müller,Lebon Régis,,Capital/Norte da Ilha,Capital/Eduardo Luz,Capital/Bancário,,,,,,,,,,,Araquari,Ascurra,,,,,,,,,Camboriú,,,,,,Garuva,,,,,Itá,Itapema,Itapoá,,,,,,,,,Navegantes,,,,Porto Belo,,Presidente Getúlio,,Rio do Campo,Rio do Oeste,,,,,,,,,,,,,,,Armazém,,,,Capivari de Baixo,,,Forquilhinha,Garopaba,,,,,,,,Meleiro,,,,,,,,,,,,,,Santa Rosa do Sul,,,,,,,,,,,,,,,,,,,,,,,,,,,Campo Belo do Sul,,Catanduvas,,,,,,,,,,,,,,,,,Herval D'Oeste,,,,,,,Ipumirim,,,,,,,,,,,,,,Modelo,,,,,,,,,,,,,,,,,,,,,,,,,,Jaguaruna`;\r\n\r\nexport const segmentos = createPartes(\r\n  createSegmento(\r\n    1,\r\n    \"Supremo Tribunal Federal\",\r\n    createPartes(createTribunal(0, \"Supremo Tribunal Federal\"))\r\n  ),\r\n  createSegmento(\r\n    2,\r\n    \"Conselho Nacional de Justiça\",\r\n    createPartes(createTribunal(0, \"Conselho Nacional de Justiça\"))\r\n  ),\r\n  createSegmento(\r\n    3,\r\n    \"Superior Tribunal de Justiça\",\r\n    createPartes(createTribunal(0, \"Superior Tribunal de Justiça\"))\r\n  ),\r\n  createSegmento(\r\n    4,\r\n    \"Justiça Federal\",\r\n    createPartes(\r\n      ...range(1, 6).map((i) =>\r\n        createTribunal(i, `Tribunal Regional Federal da ${i}ª Região`)\r\n      ),\r\n      createTribunal(90, \"Conselho de Justiça Federal\")\r\n    )\r\n  ),\r\n  createSegmento(\r\n    5,\r\n    \"Justiça do Trabalho\",\r\n    createPartes(\r\n      createTribunal(0, \"Tribunal Superior do Trabalho\"),\r\n      ...range(1, 24).map((i) =>\r\n        createTribunal(i, `Tribunal Regional do Trabalho da ${i}ª Região`)\r\n      ),\r\n      createTribunal(90, \"Conselho Superior da Justiça do Trabalho\")\r\n    )\r\n  ),\r\n  createSegmento(\r\n    6,\r\n    \"Justiça Eleitoral\",\r\n    createPartes(\r\n      createTribunal(0, \"Tribunal Superior Eleitoral\"),\r\n      ...range(1, 27).map((i) => {\r\n        const tribunal = createTribunal(\r\n          i,\r\n          `Tribunal Regional Eleitoral de(o)(a) ${estados[i]}`\r\n        );\r\n        tribunal.nomeUnidades = (num) => `${num}ª Zona Eleitoral`;\r\n        return tribunal;\r\n      })\r\n    )\r\n  ),\r\n  createSegmento(\r\n    7,\r\n    \"Justiça Militar da União\",\r\n    createPartes(\r\n      createTribunal(0, \"Superior Tribunal Militar\"),\r\n      ...range(1, 12).map((i) =>\r\n        createTribunal(i, `${i}ª Circunscrição Judiciária Militar`)\r\n      )\r\n    )\r\n  ),\r\n  createSegmento(\r\n    8,\r\n    \"Justiça dos Estados e do Distrito Federal e Territórios\",\r\n    createPartes(\r\n      ...range(1, 27).map((i) =>\r\n        createTribunal(\r\n          i,\r\n          `Tribunal de Justiça do Estado de(o)(a) ${estados[i]}`\r\n        )\r\n      )\r\n    )\r\n  ),\r\n  createSegmento(\r\n    9,\r\n    \"Justiça Militar Estadual\",\r\n    createPartes(\r\n      ...[13, 21, 26].map((num) =>\r\n        createTribunal(\r\n          num,\r\n          `Tribunal Militar do Estado de(o)(a) ${estados[num]}`\r\n        )\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\ninterface Secao {\r\n  prefixo: number;\r\n  nome: string;\r\n  unidades: string[];\r\n}\r\nconst secoesQuarta: Secao[] = [\r\n  {\r\n    prefixo: 70,\r\n    nome: \"Seção Judiciária do Paraná\",\r\n    unidades: CSV_Subsecoes_PR.split(\",\"),\r\n  },\r\n  {\r\n    prefixo: 71,\r\n    nome: \"Seção Judiciária do Rio Grande do Sul\",\r\n    unidades: CSV_Subsecoes_RS.split(\",\"),\r\n  },\r\n  {\r\n    prefixo: 72,\r\n    nome: \"Seção Judiciária de Santa Catarina\",\r\n    unidades: CSV_Subsecoes_SC.split(\",\"),\r\n  },\r\n];\r\nsegmentos.get(4)!.tribunais.get(4)!.unidades = createPartes(\r\n  createUnidade(0, \"Tribunal Regional Federal da 4ª Região\"),\r\n  ...secoesQuarta.flatMap((secao) =>\r\n    unidadesFromNomes(\r\n      secao.unidades,\r\n      (num) => secao.prefixo * 100 + num,\r\n      (nome) => `${secao.nome} - ${nome}`\r\n    )\r\n  ),\r\n  ...range(8000, 8003).map((i) =>\r\n    createUnidade(i, \"Processos administrativos (SEI!)\")\r\n  ),\r\n  createUnidade(9666, \"Secretaria de Precatórios\")\r\n);\r\nsegmentos.get(8)!.tribunais.get(24)!.unidades = createPartes(\r\n  ...unidadesFromNomes(CSV_Foruns_TJSC.split(\",\"))\r\n);\r\nexport function createUnidade(num: number, nome: string): Unidade {\r\n  return { num, txt: num.toString().padStart(4, \"0\"), nome };\r\n}\r\nexport function createTribunal(\r\n  num: number,\r\n  nome: string,\r\n  unidades?: Map<number, Unidade>\r\n): Tribunal {\r\n  return { num, txt: num.toString().padStart(2, \"0\"), nome, unidades };\r\n}\r\nexport function createSegmento(\r\n  num: number,\r\n  nome: string,\r\n  tribunais: Map<number, Tribunal>\r\n): Segmento {\r\n  return { num, txt: String(num), nome, tribunais };\r\n}\r\nexport function createPartes<T extends Parte>(...partes: T[]): Map<number, T> {\r\n  return new Map(partes.map((p) => [p.num, p]));\r\n}\r\nexport function unidadesFromNomes(\r\n  nomes: string[],\r\n  transformNum: (x: number) => number = (x) => x,\r\n  transformNome: (x: string) => string = (x) => x\r\n): Unidade[] {\r\n  return nomes\r\n    .map((nome, num) => {\r\n      if (nome === \"\") return null;\r\n      return createUnidade(transformNum(num), transformNome(nome));\r\n    })\r\n    .filter(<T>(x: T | null): x is T => x !== null);\r\n}\r\n\r\nfunction range(first: number, last: number) {\r\n  if (!Number.isInteger(first) || !Number.isInteger(last))\r\n    throw new Error(\"Limites do intervalo devem ser inteiros.\");\r\n  if (last < first) throw new RangeError(\"Intervalo deve ser crescente.\");\r\n  const length = last + 1 - first;\r\n  return Array.from({ length }, (_, i) => first + i);\r\n}\r\n","import { Either, Left, Right } from \"./Either\";\r\nimport {\r\n  Ano,\r\n  DigitoVerificador,\r\n  NumProc,\r\n  Segmento,\r\n  Sequencial,\r\n  Tribunal,\r\n  Unidade,\r\n} from \"./NumProc\";\r\nimport { segmentos } from \"./cadastros\";\r\n\r\ntype Repeat<T, N extends number, O extends T[] = []> = O extends { length: N }\r\n  ? O\r\n  : Repeat<T, N, [...O, T]>;\r\n\r\nexport function parseInput(input: string): Either<string, NumProc> {\r\n  const semDigitos = input.replace(/^\\D+/, \"\").replace(/\\D+$/, \"\");\r\n  const reText = \"7,2,4,1,2,4\"\r\n    .split(\",\")\r\n    .map((tam) => `(\\\\d{${tam}})`)\r\n    .join(`(?:\\\\s*[-\\\\.]?\\\\s*)`);\r\n  const re = new RegExp(`^${reText}$`);\r\n  const valido = semDigitos.match(re);\r\n  if (!valido) return Left(`Número de processo inválido: ${semDigitos}`);\r\n  const numproc = valido.slice(1).join(\"\");\r\n  const formatado = formatarPartes(valido.slice(1));\r\n  const [\r\n    txtSequencial,\r\n    txtDigitoVerificador,\r\n    txtAno,\r\n    txtSegmento,\r\n    txtTribunal,\r\n    txtUnidade,\r\n  ] = valido.slice(1) as Repeat<string, 6>;\r\n  const sequencial = ((): Sequencial => {\r\n    const txt = txtSequencial;\r\n    const num = Number(txt);\r\n    return { txt, num };\r\n  })();\r\n  const digitoVerificador = ((): Either<string, DigitoVerificador> => {\r\n    const txt = txtDigitoVerificador;\r\n    const num = Number(txt);\r\n    const resultado = validarDV(numproc);\r\n    if (resultado.isLeft) {\r\n      const digitoCorreto = resultado.leftValue.slice(7, 9);\r\n      return Left(\r\n        `Dígito verificador incorreto: \"${txt}\". Esperado: \"${digitoCorreto}\".`\r\n      );\r\n    }\r\n    return Right({ txt, num });\r\n  })();\r\n  const ano = ((): Either<string, Ano> => {\r\n    const txt = txtAno;\r\n    const num = Number(txt);\r\n    if (num < 1889) {\r\n      return Left(`Ano inválido: \"${num}\".`);\r\n    } else if (num > new Date().getFullYear() + 1) {\r\n      return Left(`Ano inválido: \"${num}\".`);\r\n    }\r\n    return Right({ txt, num });\r\n  })();\r\n  const segmento = ((): Either<string, Segmento> => {\r\n    const txt = txtSegmento;\r\n    const num = Number(txt);\r\n    const segmento = segmentos.get(num);\r\n    if (!segmento)\r\n      return Left(`Segmento inválido: \"${txt}\". Esperado: \"1\" a \"9\".`);\r\n    return Right(segmento);\r\n  })();\r\n  const tribunal = ((): Either<string, Tribunal> | null => {\r\n    if (segmento.isLeft) return null;\r\n    const txt = txtTribunal;\r\n    const num = Number(txt);\r\n    const tribunais = segmento.rightValue.tribunais;\r\n    const tribunal = tribunais.get(num);\r\n    if (!tribunal)\r\n      return Left(\r\n        `Tribunal inválido: \"${txt}\". Esperado: ${formatarRanges(\r\n          [...tribunais.keys()],\r\n          (x) => `${x.toString().padStart(2, \"0\")}`\r\n        )}.`\r\n      );\r\n    return Right(tribunal);\r\n  })();\r\n  const unidade = ((): Either<string, Unidade> | null => {\r\n    if (tribunal === null || tribunal.isLeft) return null;\r\n    const txt = txtUnidade;\r\n    const num = Number(txt);\r\n    const unidades = tribunal.rightValue.unidades;\r\n    if (unidades) {\r\n      const unidade = unidades.get(num);\r\n      if (!unidade)\r\n        return Left(\r\n          `Unidade de origem inválida: \"${txt}\". Esperado: ${formatarRanges(\r\n            [...unidades.keys()],\r\n            (x) => `${x.toString().padStart(4, \"0\")}`\r\n          )}.`\r\n        );\r\n      return Right(unidade);\r\n    }\r\n    const nomeUnidades = tribunal.rightValue.nomeUnidades;\r\n    if (nomeUnidades) {\r\n      return Right({ txt, num, nome: nomeUnidades(num) });\r\n    }\r\n    return Right({ txt, num });\r\n  })();\r\n  return Right({\r\n    txt: numproc,\r\n    formatado,\r\n    sequencial,\r\n    digitoVerificador,\r\n    ano,\r\n    segmento,\r\n    tribunal,\r\n    unidade,\r\n  });\r\n}\r\n\r\nfunction formatarPartes(partes: string[]): string {\r\n  return [partes.slice(0, 2).join(\"-\")].concat(partes.slice(2)).join(\".\");\r\n}\r\n\r\ntype NonEmpty<T> = [T, ...T[]];\r\nfunction formatarRanges(\r\n  numbers: number[],\r\n  format: (x: number) => string = (x) => `\"${x.toString().padStart(2, \"0\")}\"`\r\n) {\r\n  if (numbers.length < 1) throw new TypeError(`Array vazia.`);\r\n  const ranges: NonEmpty<[number] | [number, number]> = [[numbers[0]!]];\r\n  for (let i = 1; i < numbers.length; i += 1) {\r\n    const number = numbers[i]!;\r\n    const lastRange = ranges[ranges.length - 1]!;\r\n    const lastValue = lastRange[lastRange.length - 1]!;\r\n    if (number === lastValue + 1) {\r\n      lastRange[1] = number;\r\n    } else {\r\n      ranges.push([number]);\r\n    }\r\n  }\r\n  return ranges\r\n    .map((xs) => xs.map((x) => format(x)))\r\n    .map((xs) => xs.join(\" a \"))\r\n    .join(\", \");\r\n}\r\n\r\nexport function validarDV(numproc: string): Either<string, string> {\r\n  const r1 = Number(`${numproc.slice(0, 7)}${numproc.slice(9, 12)}`) % 97;\r\n  const r2 = Number(`${r1}${numproc.slice(12)}`) % 97;\r\n  const r3 = Number(`${r2}${numproc.slice(7, 9)}`) % 97;\r\n  if (r3 === 1) return Right(numproc);\r\n  const correto = 98 - (Number(`${r2}00`) % 97);\r\n  return Left(\r\n    `${numproc.slice(0, 7)}${correto\r\n      .toString()\r\n      .padStart(2, \"0\")}${numproc.slice(9)}`\r\n  );\r\n}\r\n","import { Either, Right } from \"./Either\";\r\nimport { h } from \"./h\";\r\nimport { parseInput } from \"./parseInput\";\r\n\r\nlet podeCopiar = true;\r\nconst cleanupFns: Function[] = [];\r\n\r\nexport function update(\r\n  output: HTMLOutputElement,\r\n  inputElement: HTMLInputElement\r\n) {\r\n  if (cleanupFns.length > 0) {\r\n    for (const fn of cleanupFns) {\r\n      fn();\r\n    }\r\n    cleanupFns.length = 0;\r\n  }\r\n  const input = inputElement.value;\r\n  output.textContent = \"\";\r\n  if (input === \"\") return;\r\n  const resultado = parseInput(input);\r\n  if (resultado.isLeft) {\r\n    output.append(\r\n      h(\"p\", {}, h(\"span\", { className: \"erro\" }, resultado.leftValue))\r\n    );\r\n    const digitos = resultado.leftValue.replace(/\\D/g, \"\");\r\n    if (digitos.length === 21) {\r\n      output.append(\r\n        h(\r\n          \"p\",\r\n          {},\r\n          \"Há um dígito a mais. Sugestões de números válidos similares (clique para utilizar):\"\r\n        )\r\n      );\r\n      const possibilidades = new Set<string>();\r\n      for (let i = 0; i < 21; i += 1) {\r\n        const antes = digitos.slice(0, i);\r\n        const depois = digitos.slice(i + 1, 21);\r\n        const tentativa = `${antes}${depois}`;\r\n        const resultado = parseInput(tentativa);\r\n        if (resultado.isRight) {\r\n          const { formatado, digitoVerificador, ano, unidade } =\r\n            resultado.rightValue;\r\n          if (\r\n            digitoVerificador.isRight &&\r\n            ano.isRight &&\r\n            unidade &&\r\n            unidade.isRight\r\n          ) {\r\n            possibilidades.add(formatado);\r\n          }\r\n        }\r\n      }\r\n      output.append(\r\n        h(\r\n          \"ul\",\r\n          {},\r\n          ...[...possibilidades].map((x) => h(\"li\", {}, criarLink(x)))\r\n        )\r\n      );\r\n    } else if (digitos.length === 19) {\r\n      output.append(\r\n        h(\r\n          \"p\",\r\n          {},\r\n          \"Há um dígito faltando. Sugestões de números válidos similares (clique para utilizar):\"\r\n        )\r\n      );\r\n      const possibilidades = new Set<string>();\r\n      for (let i = 0; i < 20; i += 1) {\r\n        const antes = digitos.slice(0, i);\r\n        const depois = digitos.slice(i, 19);\r\n        for (let j = 0; j < 10; j += 1) {\r\n          const tentativa = `${antes}${j}${depois}`;\r\n          const resultado = parseInput(tentativa);\r\n          if (resultado.isRight) {\r\n            const { formatado, digitoVerificador, ano, unidade } =\r\n              resultado.rightValue;\r\n            if (\r\n              digitoVerificador.isRight &&\r\n              ano.isRight &&\r\n              unidade &&\r\n              unidade.isRight\r\n            )\r\n              possibilidades.add(formatado);\r\n          }\r\n        }\r\n      }\r\n      output.append(\r\n        h(\r\n          \"ul\",\r\n          {},\r\n          ...[...possibilidades].map((x) => h(\"li\", {}, criarLink(x)))\r\n        )\r\n      );\r\n    }\r\n    return;\r\n  }\r\n\r\n  const {\r\n    txt: numproc,\r\n    formatado,\r\n    sequencial,\r\n    digitoVerificador,\r\n    ano,\r\n    segmento,\r\n    tribunal,\r\n    unidade,\r\n  } = resultado.rightValue;\r\n  output.append(\r\n    h(\r\n      \"table\",\r\n      {},\r\n      h(\r\n        \"thead\",\r\n        {},\r\n        h(\r\n          \"tr\",\r\n          null,\r\n          ...Array.from(numproc, (x) => h(\"th\", null, x)),\r\n          h(\r\n            \"td\",\r\n            null,\r\n            \"Número do processo: \",\r\n            formatado,\r\n            \" \",\r\n            criarBotaoCopiar(formatado)\r\n          )\r\n        )\r\n      ),\r\n      h(\r\n        \"tbody\",\r\n        null,\r\n        criarLinha(\r\n          numproc,\r\n          0,\r\n          7,\r\n          Right(sequencial),\r\n          (x) => `Número sequencial: ${x.num}`\r\n        ),\r\n        criarLinha(\r\n          numproc,\r\n          7,\r\n          9,\r\n          digitoVerificador,\r\n          (x) => `Dígito verificador: ${x.txt}`\r\n        ),\r\n        criarLinha(numproc, 9, 13, ano, (x) => `Ano: ${x.num}`),\r\n        criarLinha(\r\n          numproc,\r\n          13,\r\n          14,\r\n          segmento,\r\n          (x) => `Segmento do Poder Judiciário: ${x.txt} - ${x.nome}`\r\n        ),\r\n        ...(tribunal\r\n          ? [\r\n              criarLinha(\r\n                numproc,\r\n                14,\r\n                16,\r\n                tribunal,\r\n                (x) => `Tribunal: ${x.txt} - ${x.nome}`\r\n              ),\r\n            ]\r\n          : []),\r\n        ...(unidade\r\n          ? [\r\n              criarLinha(numproc, 16, 20, unidade, (x) => {\r\n                if (x.nome) return `Unidade de origem: ${x.txt} - ${x.nome}`;\r\n                else return `Unidade de origem: ${x.txt}`;\r\n              }),\r\n            ]\r\n          : [])\r\n      )\r\n    )\r\n  );\r\n  output.append(h(\"br\"));\r\n  const email = formatarEmail(formatado);\r\n  output.append(\r\n    \"Texto para pesquisar este número de processo no GMail: \",\r\n    h(\"br\"),\r\n    h(\"pre\", {}, email),\r\n    criarBotaoCopiar(email)\r\n  );\r\n\r\n  function criarLink(numproc: string) {\r\n    const span = h(\"span\", { className: \"clickable\" }, numproc);\r\n    const onclick = () => {\r\n      inputElement.value = numproc;\r\n      inputElement.dispatchEvent(new Event(\"input\"));\r\n    };\r\n    span.addEventListener(\"click\", onclick);\r\n    cleanupFns.push(() => span.removeEventListener(\"click\", onclick));\r\n    return span;\r\n  }\r\n  function criarBotaoCopiar(texto: string) {\r\n    if (!podeCopiar) {\r\n      return \"\";\r\n    }\r\n    const button = h(\"button\", { type: \"button\" }, \"Copiar\");\r\n    const onclick = (e: Event) => {\r\n      e.preventDefault();\r\n      navigator.clipboard.writeText(texto).then(\r\n        () => {\r\n          button.replaceWith(h(\"span\", { className: \"sucesso\" }, \"Copiado.\"));\r\n        },\r\n        (err) => {\r\n          console.error(err);\r\n          button.replaceWith(\r\n            h(\"span\", { className: \"erro\" }, \"Não foi possível copiar.\")\r\n          );\r\n          podeCopiar = false;\r\n        }\r\n      );\r\n    };\r\n    button.addEventListener(\"click\", onclick);\r\n    cleanupFns.push(() => button.removeEventListener(\"click\", onclick));\r\n    return button;\r\n  }\r\n}\r\nfunction fromEither<T>(\r\n  either: Either<string, T>,\r\n  transform: (value: T) => string\r\n) {\r\n  if (either.isLeft) return h(\"span\", { className: \"erro\" }, either.leftValue);\r\n  else return transform(either.rightValue);\r\n}\r\n\r\nfunction criarCelulas(numproc: string, inicio: number, fim: number) {\r\n  return [\r\n    ...(inicio === 0 ? [] : [h(\"td\", { colSpan: inicio })]),\r\n    ...Array.from(numproc.slice(inicio, fim), (x) => h(\"td\", null, x)),\r\n    ...(fim === 20 ? [] : [h(\"td\", { colSpan: 20 - fim })]),\r\n  ];\r\n}\r\n\r\nfunction criarLinha<T>(\r\n  numproc: string,\r\n  start: number,\r\n  end: number,\r\n  campo: Either<string, T>,\r\n  transform: (valor: T) => string\r\n) {\r\n  return h(\r\n    \"tr\",\r\n    null,\r\n    ...criarCelulas(numproc, start, end),\r\n    h(\"td\", {}, fromEither(campo, transform))\r\n  );\r\n}\r\n\r\nfunction formatarEmail(formatado: string): string {\r\n  const numproc = formatado.replace(/\\D/g, \"\");\r\n  const alternativo = `${numproc.slice(0, 7)}-${numproc.slice(\r\n    7,\r\n    9\r\n  )}.${numproc.slice(9, 13)}.${numproc.slice(13, 16)}.${numproc.slice(16, 20)}`;\r\n  return [formatado, alternativo, numproc].join(\"|\");\r\n}\r\n","import { update } from \"./update\";\r\n\r\nexport function main() {\r\n  const form = document.querySelector<HTMLFormElement>(\"form\")!;\r\n  const input = document.querySelector<HTMLInputElement>(\"input\")!;\r\n  const reset =\r\n    document.querySelector<HTMLButtonElement>(\"button[type=reset]\")!;\r\n  const output = document.querySelector<HTMLOutputElement>(\"output\")!;\r\n\r\n  form.addEventListener(\"submit\", (e) => e.preventDefault());\r\n  reset.addEventListener(\"click\", () => {\r\n    input.value = \"\";\r\n    input.focus();\r\n    update(output, input);\r\n  });\r\n  input.addEventListener(\"input\", () => update(output, input));\r\n  update(output, input);\r\n}\r\n","import { main } from \"./main\";\r\n\r\nmain();\r\n"],"names":["Left","leftValue","Right","rightValue","h","tag","props","children","elt","key","value","CSV_Estados","estados","CSV_Subsecoes_PR","CSV_Subsecoes_RS","CSV_Subsecoes_SC","CSV_Foruns_TJSC","segmentos","createPartes","createSegmento","createTribunal","range","i","tribunal","num","secoesQuarta","createUnidade","secao","unidadesFromNomes","nome","unidades","tribunais","partes","p","nomes","transformNum","x","transformNome","first","last","length","_","parseInput","input","semDigitos","reText","tam","re","valido","numproc","formatado","formatarPartes","txtSequencial","txtDigitoVerificador","txtAno","txtSegmento","txtTribunal","txtUnidade","sequencial","txt","digitoVerificador","resultado","validarDV","digitoCorreto","ano","segmento","formatarRanges","unidade","nomeUnidades","numbers","format","ranges","number","lastRange","lastValue","xs","r2","correto","podeCopiar","cleanupFns","update","output","inputElement","fn","digitos","possibilidades","antes","depois","tentativa","criarLink","j","criarBotaoCopiar","criarLinha","email","formatarEmail","span","onclick","texto","button","e","err","fromEither","either","transform","criarCelulas","inicio","fim","start","end","campo","alternativo","main","form","reset"],"mappings":"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"}